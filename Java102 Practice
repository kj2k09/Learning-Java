import java.util.ArrayList;

public class Grid {
    private int[][] grid;

    public Grid(int[][] grid) {
        this.grid = grid;
    }

    public ArrayList<Integer> diagonal() {
        ArrayList<Integer> diagonalElements = new ArrayList<>();
        int size = Math.min(grid.length, grid[0].length);
        for (int i = 0; i < size; i++) {
            diagonalElements.add(grid[i][i]);
        }
        return diagonalElements;
    }

    public static void main(String[] args) {
        int[][] gridData = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        Grid grid = new Grid(gridData);
        System.out.println(grid.diagonal());
    }
}


import java.util.ArrayList;

public class Grid {
    private int numRows;
    private int numCols;
    private static ArrayList<Grid> allGrids = new ArrayList<>();

    public Grid(int numRows, int numCols) {
        this.numRows = numRows;
        this.numCols = numCols;
        allGrids.add(this);
    }

    public int getLargestSide() {
        return Math.max(numRows, numCols);
    }

    public static int getBiggestSideLength() {
        int maxSideLength = 0;
        for (Grid grid : allGrids) {
            maxSideLength = Math.max(maxSideLength, grid.getLargestSide());
        }
        return maxSideLength;
    }

    public static void main(String[] args) {
        new Grid(3, 4);
        new Grid(5, 5);
        new Grid(2, 6);

        System.out.println("Biggest side length: " + Grid.getBiggestSideLength());
    }
}
public class Circle {
	public final Point center;
	public final double radius;

	public Circle(Point center, double radius) {
		this.center = center;
		this.radius = radius;
	}

	public double area() {
		return Math.PI * Math.pow(radius, 2);
	}

	public double perimeter() {
		return 2 * Math.PI * radius;
	}

	/** 
	* @return Whether point p is inside of the circle.
	*/
	public boolean isInside(Point p) {
		return Point.distance(center, p) < radius;
	}

	/** 
	* @return Whether point p part of/on the border of the circle.
	*/
	public boolean isOn(Point p) {
		return Point.distance(center, p) == radius;
	}

	/** 
	* @param x How much to translate the circle by in the + x direction.
	* @param y How much to translate the circle by in the + y direction.
	* @return The circle that results from the translation.
	*/
	public Circle translate(double x, double y) {
		return new Circle(center.translateX(x).translateY(y), radius);
	}

	/** 
	* @return The circle that results from scaling by k.
	*/
	public Circle scale(double k) {
		return new Circle(center, radius * k);
	}

	@Override
	public String toString() {
		return "(center: " + center + "; radius: " + radius + ")";
	}
}

public class Square {
	public final Point corner;
	public final double sideLength;

	/**
	* @param corner The bottom left corner of the square
	* @param sideLength
	*/
	public Square(Point corner, double sideLength) {
		this.corner = corner;
		this.sideLength = sideLength;
	}

	public double area() {
		return sideLength * sideLength;
	}

	public double perimeter() {
		return sideLength * 4;
	}
	
	/** 
	* @return Whether point p is inside of the square.
	*/
	public boolean isInside(Point p) {
		double xDist = p.x - corner.x;
		double yDist = p.y - corner.y;
		return 0 < xDist && xDist < sideLength &&
			   0 < yDist && yDist < sideLength;
	}

	/** 
	* @return Whether point p part of/on the border of the square.
	*/
	public boolean isOn(Point p) {
		double xLength = p.x - sideLength.x;
		double yLength = p.y - sideLength.y;
		return 0 < xLength && xLength < sideLength &&
			   0 < yLength && yLength < sideLength;


	}
	
	/** 
	* @param x How much to translate the sqaure by in the + x direction.
	* @param y How much to translate the squarer by in the + y direction.
	* @return The sqaure that results from the translation.
	*/
	public Square translate(double x, double y) {
		return new Square(corner.translateX(x).translateY(y), sideLength);
	}

	/** 
	* @return The sqaure that results from scaling the side length and maintaining the bottom left corner
	*/
	public Square scale(double k) {
		return new Square(corner, sideLength * k);
	}

	public Point[] corners() {
		//write this

	@Override
	public String toString() {
		return "(corner: " + corner + "; side length: " + sideLength + ")";
	}
